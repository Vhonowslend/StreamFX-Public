# AUTOGENERATED COPYRIGHT HEADER START
# Copyright (C) 2019-2023 Michael Fabian 'Xaymar' Dirks <info@xaymar.com>
# AUTOGENERATED COPYRIGHT HEADER END

name: Build

on:
  push:
    branches:
      - '*'
    tags:
      - '*'
  pull_request:
    branches:
      - '*'

concurrency:
  group: build-${{ github.ref_name }}
  cancel-in-progress: true

env:
  CACHE_VERSION: "2022-12-02"

jobs:
  windows:
    strategy:
      fail-fast: false
      matrix:
        runner: [ "windows-2022" ]
        name: [ "Windows" ]
        compiler: [ "MSVC", "Clang" ]
        qt: [ 6 ]
        include:
          - compiler: "MSVC"
            package_name: "windows"
            CMAKE_SYSTEM_VERSION: "10.0.20348.0"
            CMAKE_GENERATOR: "Visual Studio 17 2022"
            CMAKE_GENERATOR_PLATFORM: "x64"
          - compiler: "Clang"
            package_name: "windows-clang"
            CMAKE_SYSTEM_VERSION: "10.0.20348.0"
            CMAKE_GENERATOR: "Visual Studio 17 2022"
            CMAKE_GENERATOR_TOOLSET: "ClangCL"
            CMAKE_GENERATOR_PLATFORM: "x64"
    runs-on: "${{ matrix.runner }}"
    name: "${{ matrix.name }} (${{ matrix.compiler }})"
    env:
      CMAKE_GENERATOR: "${{ matrix.CMAKE_GENERATOR }}"
      CMAKE_GENERATOR_PLATFORM: "${{ matrix.CMAKE_GENERATOR_PLATFORM }}"
      CMAKE_GENERATOR_TOOLSET: "${{ matrix.CMAKE_GENERATOR_TOOLSET }}"
      CMAKE_SYSTEM_VERSION: "${{ matrix.CMAKE_SYSTEM_VERSION }}"
    steps:
    - name: "Clone"
      uses: actions/checkout@v3
      with:
        submodules: recursive
        fetch-depth: 0
    - name: "Gather Information"
      id: info
      shell: bash
      run: |
        # Define buildspec file
        buildspec="${{ github.workspace }}/third-party/obs-studio/buildspec.json"

        # Prebuilt Dependencies Version
        IFS=$'\n' buildspecdata=($(node tools/buildspec.js "${buildspec}" "prebuilt" "windows-x64"))
        echo "obs_deps_version=${buildspecdata[0]}" >> "$GITHUB_ENV"
        echo "obs_deps_hash=${buildspecdata[1]}" >> "$GITHUB_ENV"
        echo "obs_deps_url=${buildspecdata[2]}" >> "$GITHUB_ENV"

        # Qt Version
        IFS=$'\n' buildspecdata=($(node tools/buildspec.js "${buildspec}" "qt${{ matrix.qt }}" "windows-x64"))
        echo "qt_version=${buildspecdata[0]}" >> "$GITHUB_ENV"
        echo "qt_hash=${buildspecdata[1]}" >> "$GITHUB_ENV"
        echo "qt_url=${buildspecdata[2]}" >> "$GITHUB_ENV"

        # libOBS Version
        echo "obs_version=$(cd "${{ github.workspace }}/third-party/obs-studio" && git describe --tags --long)" >> "$GITHUB_ENV"
    - name: "Dependency: Qt (Cache)"
      id: qt-cache
      uses: actions/cache@v3
      with:
        path: "${{ github.workspace }}/build/qt"
        key: "qt${{ env.qt_hash }}-${{ env.CACHE_VERSION }}"
    - name: "Dependency: Qt"
      id: qt
      if: ${{ steps.qt-cache.outputs.cache-hit != 'true' }}
      shell: bash
      run: |
        curl --retry 5 --retry-delay 30 -jLo /tmp/qt.zip "${{ env.qt_url }}"
        if [[ ! -f "${{ github.workspace }}/build/qt" ]]; then mkdir -p "${{ github.workspace }}/build/qt"; fi
        7z x -y -o"${{ github.workspace }}/build/qt" -- "/tmp/qt.zip"
    - name: "Dependency: Prebuilt OBS Studio Dependencies (Cache)"
      id: obsdeps-cache
      uses: actions/cache@v3
      with:
        path: "${{ github.workspace }}/build/obsdeps"
        key: "obsdeps${{ env.obs_deps_hash }}-${{ env.CACHE_VERSION }}"
    - name: "Dependency: Prebuilt OBS Studio Dependencies"
      id: obsdeps
      if: ${{ steps.obsdeps-cache.outputs.cache-hit != 'true' }}
      shell: bash
      run: |
        curl --retry 5 --retry-delay 30 -jLo /tmp/obsdeps.zip "${{ env.obs_deps_url }}"
        if [[ ! -f "${{ github.workspace }}/build/obsdeps" ]]; then mkdir -p "${{ github.workspace }}/build/obsdeps"; fi
        7z x -y -o"${{ github.workspace }}/build/obsdeps" -- "/tmp/obsdeps.zip"
    - name: "Dependency: OBS Libraries (Cache)"
      id: obs-cache
      uses: actions/cache@v3
      with:
        path: "${{ github.workspace }}/build/obs"
        key: "obs${{ env.obs_version }}-obsdeps${{ env.obs_deps_hash }}-qt${{ env.qt_hash }}-${{ env.CACHE_VERSION }}"
    - name: "Dependency: OBS Libraries"
      id: obs
      if: ${{ steps.obs-cache.outputs.cache-hit != 'true' }}
      shell: bash
      run: |
        cmake \
          -S "${{ github.workspace }}/third-party/obs-studio" \
          -B "${{ github.workspace }}/build/obs" \
          -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/build/obs/install" \
          -DCMAKE_PREFIX_PATH="${{ github.workspace }}/build/obsdeps;${{ github.workspace }}/build/qt" \
          -DENABLE_PLUGINS=OFF \
          -DENABLE_UI=OFF \
          -DENABLE_SCRIPTING=OFF
        cmake \
          --build "${{ github.workspace }}/build/obs" \
          --config RelWithDebInfo \
          --target obs-frontend-api
        cmake \
          --install "${{ github.workspace }}/build/obs" \
          --config RelWithDebInfo \
          --component obs_libraries
    - name: "Configure"
      continue-on-error: true
      shell: bash
      run: |
        cmake \
          -S "${{ github.workspace }}" \
          -B "${{ github.workspace }}/build/ci" \
          -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/build/ci/install" \
          -DPACKAGE_NAME="streamfx-${{ matrix.package_name }}" \
          -DPACKAGE_PREFIX="${{ github.workspace }}/build/package" \
          -DCMAKE_PREFIX_PATH="${{ github.workspace }}/build/obs/install;${{ github.workspace }}/build/qt;${{ github.workspace }}/build/obsdeps" \
          -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON
    - name: "Build: Debug"
      continue-on-error: true
      shell: bash
      env:
        CMAKE_BUILD_TYPE: "Debug"
      run: |
        cmake --build "build/ci" --config ${{ env.CMAKE_BUILD_TYPE }} --target StreamFX
    - name: "Build: Release"
      shell: bash
      env:
        CMAKE_BUILD_TYPE: "RelWithDebInfo"
      run: |
        cmake --build "build/ci" --config ${{ env.CMAKE_BUILD_TYPE }} --target install
    - name: "Packaging: Install InnoSetup"
      if: startsWith( matrix.runner, 'windows' )
      run: |
        curl "-kL" "https://cdn.xaymar.com/ci/innosetup-6.2.1.exe" "-f" "--retry" "5" "-o" "inno.exe"
        .\inno.exe /VERYSILENT /SP- /SUPPRESSMSGBOXES /NORESTART
    - name: "Packaging"
      shell: cmd
      run: |
        "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" /V10 ".\build\ci\installer.iss"
    - name: "Artifacts"
      uses: actions/upload-artifact@v1
      with:
        name: "${{ matrix.runner }}-${{ matrix.compiler }}-qt${{ matrix.qt }}"
        path: "${{ github.workspace }}/build/package"

  macos:
    strategy:
      fail-fast: false
      matrix:
        runner: [ "macos-12" ]
        compiler: [ "Clang" ]
        qt: [ 6 ]
        include:
          - compiler: "Clang"
            name: "MacOS"
            package_name: "macos"
            CMAKE_GENERATOR: "Xcode"
            CMAKE_OSX_DEPLOYMENT_TARGET: "10.15"
            CMAKE_OSX_ARCHITECTURES: "x86_64;arm64"
    runs-on: "${{ matrix.runner }}"
    name: "${{ matrix.name }} (${{ matrix.compiler }})"
    env:
      CMAKE_GENERATOR: "${{ matrix.CMAKE_GENERATOR }}"
      CMAKE_GENERATOR_PLATFORM: "${{ matrix.CMAKE_GENERATOR_PLATFORM }}"
      CMAKE_GENERATOR_TOOLSET: "${{ matrix.CMAKE_GENERATOR_TOOLSET }}"
      CMAKE_SYSTEM_VERSION: "${{ matrix.CMAKE_SYSTEM_VERSION }}"
      CMAKE_OSX_DEPLOYMENT_TARGET: "${{ matrix.CMAKE_OSX_DEPLOYMENT_TARGET }}"
      CMAKE_OSX_ARCHITECTURES: "${{ matrix.CMAKE_OSX_ARCHITECTURES }}"
    steps:
    - name: "Clone"
      uses: actions/checkout@v3
      with:
        submodules: recursive
        fetch-depth: 0
    - name: "Gather Information"
      id: info
      shell: bash
      run: |
        # Define buildspec file
        buildspec="${{ github.workspace }}/third-party/obs-studio/buildspec.json"

        # Prebuilt Dependencies Version
        IFS=$'\n' buildspecdata=($(node tools/buildspec.js "${buildspec}" "prebuilt" "macos-universal"))
        echo "obs_deps_version=${buildspecdata[0]}" >> "$GITHUB_ENV"
        echo "obs_deps_hash=${buildspecdata[1]}" >> "$GITHUB_ENV"
        echo "obs_deps_url=${buildspecdata[2]}" >> "$GITHUB_ENV"

        # Qt Version
        IFS=$'\n' buildspecdata=($(node tools/buildspec.js "${buildspec}" "qt${{ matrix.qt }}" "macos-universal"))
        echo "qt_version=${buildspecdata[0]}" >> "$GITHUB_ENV"
        echo "qt_hash=${buildspecdata[1]}" >> "$GITHUB_ENV"
        echo "qt_url=${buildspecdata[2]}" >> "$GITHUB_ENV"

        # libOBS Version
        echo "obs_version=$(cd "${{ github.workspace }}/third-party/obs-studio" && git describe --tags --long)" >> "$GITHUB_ENV"
    - name: "Dependency: Qt (Cache)"
      id: qt-cache
      uses: actions/cache@v3
      with:
        path: "${{ github.workspace }}/build/qt"
        key: "qt${{ env.qt_hash }}-${{ env.CACHE_VERSION }}"
    - name: "Dependency: Qt"
      id: qt
      if: ${{ steps.qt-cache.outputs.cache-hit != 'true' }}
      shell: bash
      run: |
        curl --retry 5 --retry-delay 30 -jLo /tmp/qt.tar.xz "${{ env.qt_url }}"
        if [[ ! -f "${{ github.workspace }}/build/qt" ]]; then mkdir -p "${{ github.workspace }}/build/qt"; fi
        tar -xvf "/tmp/qt.tar.xz" -C "${{ github.workspace }}/build/qt"
    - name: "Dependency: Prebuilt OBS Studio Dependencies (Cache)"
      id: obsdeps-cache
      uses: actions/cache@v3
      with:
        path: "${{ github.workspace }}/build/obsdeps"
        key: "obsdeps${{ env.obs_deps_hash }}-${{ env.CACHE_VERSION }}"
    - name: "Dependency: Prebuilt OBS Studio Dependencies"
      id: obsdeps
      if: ${{ steps.obsdeps-cache.outputs.cache-hit != 'true' }}
      shell: bash
      run: |
        curl --retry 5 --retry-delay 30 -jLo /tmp/obsdeps.tar.xz "${{ env.obs_deps_url }}"
        if [[ ! -f "${{ github.workspace }}/build/obsdeps" ]]; then mkdir -p "${{ github.workspace }}/build/obsdeps"; fi
        tar -xvf "/tmp/obsdeps.tar.xz" -C "${{ github.workspace }}/build/obsdeps"
    - name: "Dependency: OBS Libraries (Cache)"
      id: obs-cache
      uses: actions/cache@v3
      with:
        path: "${{ github.workspace }}/build/obs"
        key: "obs${{ env.obs_version }}-obsdeps${{ env.obs_deps_hash }}-qt${{ env.qt_hash }}-${{ env.CACHE_VERSION }}"
    - name: "Dependency: OBS Libraries"
      id: obs
      if: ${{ steps.obs-cache.outputs.cache-hit != 'true' }}
      shell: bash
      run: |
        cmake \
          -S "${{ github.workspace }}/third-party/obs-studio" \
          -B "${{ github.workspace }}/build/obs" \
          -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/build/obs/install" \
          -DCMAKE_PREFIX_PATH="${{ github.workspace }}/build/obsdeps;${{ github.workspace }}/build/qt" \
          -DENABLE_PLUGINS=OFF \
          -DENABLE_UI=OFF \
          -DENABLE_SCRIPTING=OFF
        cmake \
          --build "${{ github.workspace }}/build/obs" \
          --config RelWithDebInfo \
          --target obs-frontend-api
        cmake \
          --install "${{ github.workspace }}/build/obs" \
          --config RelWithDebInfo \
          --component obs_libraries
    - name: "Configure"
      continue-on-error: true
      shell: bash
      run: |
        cmake \
          -S "${{ github.workspace }}" \
          -B "${{ github.workspace }}/build/ci" \
          -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/build/ci/install" \
          -DPACKAGE_NAME="streamfx-${{ matrix.package_name }}" \
          -DPACKAGE_PREFIX="${{ github.workspace }}/build/package" \
          -DCMAKE_PREFIX_PATH="${{ github.workspace }}/build/obs/install;${{ github.workspace }}/build/qt;${{ github.workspace }}/build/obsdeps" \
          -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON
    - name: "Build: Debug"
      continue-on-error: true
      shell: bash
      run: |
        cmake --build "build/ci" --config Debug --target StreamFX
    - name: "Build: Release"
      shell: bash
      env:
        CMAKE_BUILD_TYPE: "RelWithDebInfo"
      run: |
        cmake --build "build/ci" --config RelWithDebInfo --target install
    - name: 'Packaging: Install Packages'
      if: startsWith( matrix.runner, 'macos' )
      shell: bash
      run: |
        curl -kL https://cdn.xaymar.com/ci/Packages-1.2.10.dmg -f --retry 5 -o "Packages.dmg"
        sudo hdiutil attach ./Packages.dmg
        pushd /Volumes/Packages*
        sudo installer -pkg ./Install\ Packages.pkg -target /
    - name: "Packaging"
      shell: cmd
      run: |
        "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" /V10 ".\build\ci\installer.iss"
    - name: "Artifacts"
      uses: actions/upload-artifact@v1
      with:
        name: "${{ matrix.runner }}-${{ matrix.compiler }}-qt${{ matrix.qt }}"
        path: "${{ github.workspace }}/build/package"

  ubuntu:
    strategy:
      fail-fast: false
      matrix:
        runner: [ "ubuntu-22.04", "ubuntu-20.04" ]
        compiler: [ "GCC-12", "GCC-11", "GCC-10", "Clang-16", "Clang-15", "Clang-14" ]
        qt: [ 5, 6 ]
        CMAKE_GENERATOR: [ "Ninja Multi-Config" ]
        exclude:
          - runner: "ubuntu-22.04"
            qt: 5
          - runner: "ubuntu-22.04"
            compiler: "gcc-10"
          - runner: "ubuntu-20.04"
            qt: 6
          - runner: "ubuntu-20.04"
            compiler: "gcc-12"
        include:
          - runner: "ubuntu-22.04"
            name: "Ubuntu 22.04"
            package_name: "ubuntu22.04-qt6"
          - runner: "ubuntu-20.04"
            name: "Ubuntu 20.04"
            package_name: "ubuntu20.04-qt5"
    runs-on: "${{ matrix.runner }}"
    name: "${{ matrix.name }} (${{ matrix.compiler }}, Qt${{ matrix.qt }})"
    env:
      CMAKE_GENERATOR: "${{ matrix.CMAKE_GENERATOR }}"
      CMAKE_GENERATOR_PLATFORM: "${{ matrix.CMAKE_GENERATOR_PLATFORM }}"
      CMAKE_GENERATOR_TOOLSET: "${{ matrix.CMAKE_GENERATOR_TOOLSET }}"
      CMAKE_SYSTEM_VERSION: "${{ matrix.CMAKE_SYSTEM_VERSION }}"
      PACKAGE_NAME: "streamfx-${{ matrix.package_name }}"
    steps:
    - name: "Clone"
      uses: actions/checkout@v3
      with:
        submodules: recursive
        fetch-depth: 0
    - name: "Install Build Tools"
      shell: bash
      run: |
        sudo apt-get -qq update
        sudo apt-get purge libjpeg9-dev:amd64 libjpeg8-dev:amd64 libjpeg-turbo8-dev:amd64
        sudo apt-get install \
          build-essential \
          checkinstall \
          pkg-config \
          cmake \
          ninja-build \
          git
        IFS=$'-' compiler=($(echo "${{ matrix.compiler }}")) # ToDo: Can this be done without invoking a sub-shell?
        if [[ "${compiler[0]}" == "GCC" ]]; then
          sudo apt-get install \
            binutils gcc-${compiler[1]} g++-${compiler[1]}
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-${compiler[1]} 800 --slave /usr/bin/g++ g++ /usr/bin/g++-${compiler[1]}
          echo "CMAKE_C_COMPILER=gcc-${compiler[1]}" >> "$GITHUB_ENV"
          echo "CMAKE_CXX_COMPILER=g++-${compiler[1]}" >> "$GITHUB_ENV"
          echo "CMAKE_C_FLAGS=-fuse-ld=ld" >> "$GITHUB_ENV"
          echo "CMAKE_CXX_FLAGS=-fuse-ld=ld" >> "$GITHUB_ENV"
        elif [[ "${compiler[0]}" == "Clang" ]]; then
          sudo apt-get purge clang clangd clang++ lld lldb clang-format clang-tidy
          curl -jLo /tmp/llvm.sh "https://apt.llvm.org/llvm.sh"
          chmod +x /tmp/llvm.sh
          sudo /tmp/llvm.sh ${compiler[1]} all
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-${compiler[1]} 800
          sudo update-alternatives --install /usr/bin/clangd clangd /usr/bin/clangd-${compiler[1]} 800
          sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-${compiler[1]} 800
          sudo update-alternatives --install /usr/bin/lld lld /usr/bin/lld-${compiler[1]} 800
          sudo update-alternatives --install /usr/bin/lldb lldb /usr/bin/lldb-${compiler[1]} 800
          sudo update-alternatives --install /usr/bin/clang-format clang-format /usr/bin/clang-format-${compiler[1]} 800
          sudo update-alternatives --install /usr/bin/clang-tidy clang-tidy /usr/bin/clang-tidy-${compiler[1]} 800
          echo "CMAKE_C_COMPILER=clang-${compiler[1]}" >> "$GITHUB_ENV"
          echo "CMAKE_CXX_COMPILER=clang++-${compiler[1]}" >> "$GITHUB_ENV"
          echo "CMAKE_C_FLAGS=-fuse-ld=ld.lld" >> "$GITHUB_ENV"
          echo "CMAKE_CXX_FLAGS=-fuse-ld=ld.lld" >> "$GITHUB_ENV"
        else
          echo "Unknown Compiler"
          exit 1
        fi

        # Adjust package name
        echo "PACKAGE_NAME=${{ env.PACKAGE_NAME }}-${compiler[0]}${compiler[1]}" >> "$GITHUB_ENV"
    - name: "Dependency: Qt"
      id: qt
      shell: bash
      run: |
        if [[ ${{ matrix.qt }} -eq 5 ]]; then
          sudo apt-get -y install -V \
            qtbase5-dev qtbase5-private-dev libqt5svg5-dev
        elif [[ ${{ matrix.qt }} -eq 6 ]]; then
          sudo apt-get -y install -V \
            qt6-base-dev qt6-base-private-dev libqt6svg6-dev libgles2-mesa-dev libegl1-mesa-dev libgl1-mesa-dev
        fi
    - name: "Dependency: Prebuilt OBS Studio Dependencies"
      id: obsdeps
      shell: bash
      run: |
        sudo apt-get -y install -V \
          libavcodec-dev libavdevice-dev libavfilter-dev libavformat-dev libavutil-dev libswresample-dev libswscale-dev \
          libcurl4-openssl-dev
    - name: "Dependency: OBS Libraries (Cache)"
      id: obs-cache
      uses: actions/cache@v3
      with:
        path: "${{ github.workspace }}/build/obs"
        key: "obs${{ env.obs_version }}-${{ matrix.runner }}-${{ matrix.compiler }}-${{ env.CACHE_VERSION }}"
    - name: "Dependency: OBS Libraries"
      id: obs
      if: ${{ steps.obs-cache.outputs.cache-hit != 'true' }}
      shell: bash
      run: |
        # Extra requirements by libobs on Linux.
        sudo apt-get install \
          libavcodec-dev libavdevice-dev libavfilter-dev libavformat-dev libavutil-dev libswresample-dev libswscale-dev \
          libx264-dev libcurl4-openssl-dev libmbedtls-dev libgl1-mesa-dev libjansson-dev libluajit-5.1-dev python3-dev \
          libx11-dev libxcb-randr0-dev libxcb-shm0-dev libxcb-xinerama0-dev libxcomposite-dev libxinerama-dev \
          libxcb1-dev libx11-xcb-dev libxcb-xfixes0-dev swig libcmocka-dev libxss-dev libglvnd-dev libgles2-mesa \
          libgles2-mesa-dev libwayland-dev \
          libasound2-dev libfdk-aac-dev libfontconfig-dev libfreetype6-dev libjack-jackd2-dev libpulse-dev \
          libsndio-dev libspeexdsp-dev libudev-dev libv4l-dev libva-dev libvlc-dev libdrm-dev
        cmake \
          -S "${{ github.workspace }}/third-party/obs-studio" \
          -B "${{ github.workspace }}/build/obs" \
          -G "Unix Makefiles" \
          -DCMAKE_BUILD_TYPE="Release" \
          -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/build/obs/install" \
          -DCMAKE_PREFIX_PATH="${{ github.workspace }}/build/obsdeps;${{ github.workspace }}/build/qt" \
          -DENABLE_PLUGINS=OFF \
          -DENABLE_UI=OFF \
          -DENABLE_SCRIPTING=OFF
        cmake \
          --build "${{ github.workspace }}/build/obs" \
          --config Release \
          --target obs-frontend-api
        cmake \
          --install "${{ github.workspace }}/build/obs" \
          --config Release \
          --component obs_libraries
    - name: "Configure"
      continue-on-error: true
      shell: bash
      run: |
        cmake \
          -S "${{ github.workspace }}" \
          -B "${{ github.workspace }}/build/ci" \
          -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/build/ci/install" \
          -DPACKAGE_NAME="streamfx-${{ env.PACKAGE_NAME }}" \
          -DPACKAGE_PREFIX="${{ github.workspace }}/build/package" \
          -Dlibobs_DIR="${{ github.workspace }}/build/obs/install" \
          -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON
    - name: "Build: Debug"
      continue-on-error: true
      shell: bash
      run: |
        cmake --build "build/ci" --config Debug --target StreamFX
    - name: "Build: Release"
      shell: bash
      run: |
        cmake --build "build/ci" --config RelWithDebInfo --target install/strip
    - name: "Packaging"
      shell: bash
      run: |
        mkdir "${{ github.workspace }}/build/package"
        cmake --build "${{ github.workspace }}/build/ci" --config RelWithDebInfo --target PACKAGE_7Z
    - name: "Artifacts"
      uses: actions/upload-artifact@v1
      with:
        name: "${{ matrix.runner }}-${{ matrix.compiler }}-qt${{ matrix.qt }}"
        path: "${{ github.workspace }}/build/package"
