// Smooth Pixelate by existical
// https://www.shadertoy.com/view/wt23Wy

#define vec2 float2
#define vec3 float3
#define vec4 float4
#define ivec2 int2
#define ivec3 int3
#define ivec4 int4
#define mat2 float2x2
#define mat3 float3x3
#define mat4 float4x4
#define fract frac
#define mix lerp
#define iTime Time.x
#define iResolution ViewSize

uniform float2 mouse<
	string name = "Virtual Mouse Coordinates";
	string field_type = "slider";
	float2 minimum = {0, 0};
	float2 maximum = {100., 100.};
	float2 scale = {.01, .01};
	float2 step = {.01, .01};
> = {0., 0.};

uniform float4x4 ViewProj<
	bool automatic = true;
>;

uniform bool direction<
	string name = "Invert Direction";
> = true;

uniform float4 Time<
	bool automatic = true;
>;

uniform float4 ViewSize<
	bool automatic = true;
>;

uniform texture2d InputA<
	bool automatic = true;
>;

uniform float4x4 Random <
	bool visible = false;	
	string name = "Random Array";
	string description = "A float4x4 value containing random values between 0 and 1";
>;

uniform float4x4 Random <
	bool automatic = true;
>;

sampler_state def_sampler {
    AddressU  = Clamp;
    AddressV  = Clamp;
    Filter    = Linear;
};

int2 iMouse() {
	return int2(mouse.x * ViewSize.x, mouse.y * ViewSize.y);
}

/*ps start*/

vec4 blur13(texture2D image, vec2 uv, vec2 resolution, vec2 direction) {
  vec4 color = vec4(0.0,0.0,0.0,0.0);
  vec2 off1 = vec2(1.411764705882353,1.411764705882353) * direction;
  vec2 off2 = vec2(3.2941176470588234,3.2941176470588234) * direction;
  vec2 off3 = vec2(5.176470588235294,5.176470588235294) * direction;
  color += image.Sample(def_sampler, uv) * 0.1964825501511404;
  color += image.Sample(def_sampler, uv + (off1 / resolution)) * 0.2969069646728344;
  color += image.Sample(def_sampler, uv - (off1 / resolution)) * 0.2969069646728344;
  color += image.Sample(def_sampler, uv + (off2 / resolution)) * 0.09447039785044732;
  color += image.Sample(def_sampler, uv - (off2 / resolution)) * 0.09447039785044732;
  color += image.Sample(def_sampler, uv + (off3 / resolution)) * 0.010381362401148057;
  color += image.Sample(def_sampler, uv - (off3 / resolution)) * 0.010381362401148057;
  return color;
}

vec4 blur9(texture2D image, vec2 uv, vec2 resolution, vec2 direction) {
  vec4 color = vec4(0.0,0.0,0.0,0.0);
  vec2 off1 = vec2(1.3846153846,1.3846153846) * direction;
  vec2 off2 = vec2(3.2307692308,3.2307692308) * direction;
  color += image.Sample(def_sampler, uv) * 0.2270270270;
  color += image.Sample(def_sampler, uv + (off1 / resolution)) * 0.3162162162;
  color += image.Sample(def_sampler, uv - (off1 / resolution)) * 0.3162162162;
  color += image.Sample(def_sampler, uv + (off2 / resolution)) * 0.0702702703;
  color += image.Sample(def_sampler, uv - (off2 / resolution)) * 0.0702702703;
  return color;
}

vec4 blur5(texture2D image, vec2 uv, vec2 resolution, vec2 direction) {
  vec4 color = vec4(0.0,0.0,0.0,0.0);;
  vec2 off1 = vec2(1.3333333333333333,1.3333333333333333) * direction;
  color += image.Sample(def_sampler, uv) * 0.29411764705882354;
  color += image.Sample(def_sampler, uv + (off1 / resolution)) * 0.35294117647058826;
  color += image.Sample(def_sampler, uv - (off1 / resolution)) * 0.35294117647058826;
  return color; 
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    vec4 color = vec4(0.0,0.0,0.0,0.0);
    vec2 direction = vec2(1.0,1.0);
    
    vec2 uv = vec2(fragCoord.xy / iResolution.xy);
    vec2 tempCoord = vec2(fragCoord.x,-fragCoord.y);
    
    float Pixels = 1000.0;
    float dx = 9.0 * (1.0 / Pixels);
    float dy = 12.0 * (1.0 / Pixels);
    vec2 Coord = vec2(dx * floor(uv.x / dx), dy * floor(uv.y / dy));
 
    direction = vec2(2.0,2.0);
    color += blur13(InputA, Coord, iResolution.xy, direction)*0.5;
    direction = vec2(2.0,-2.0);
    color += blur13(InputA, Coord, iResolution.xy, direction)*0.5;
    
    fragColor = color;
}

/*ps end*/

struct VertFragData {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

VertFragData VSDefault(VertFragData vtx) {
	vtx.pos = mul(float4(vtx.pos.xyz, 1.0), ViewProj);
	return vtx;
}

float4 PSDefault(VertFragData vtx) : TARGET {
	float4 col = float4(1., 1., 1., 1.);
	mainImage(col, vtx.uv * ViewSize.xy);
	return col;
}

technique Draw 
{
	pass
	{
		vertex_shader = VSDefault(vtx);
		pixel_shader  = PSDefault(vtx); 
	}
}
