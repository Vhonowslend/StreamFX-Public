// Copyright 2021 Michael Fabian 'Xaymar' Dirks <info@xaymar.com>
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//	this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright notice,
//	this list of conditions and the following disclaimer in the documentation
//	and/or other materials provided with the distribution.
// 3. Neither the name of the copyright holder nor the names of its contributors
//	may be used to endorse or promote products derived from this software
//	without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

#include "../base.effect"

//-----------------------------------------------------------------------------
// Uniforms
//-----------------------------------------------------------------------------

uniform texture2d TextureA<
	string field_type = "input";
>;

uniform texture2d TextureB< 
	string field_type = "input";
>;

//-----------------------------------------------------------------------------
// Technique: Flip
//-----------------------------------------------------------------------------

uniform float FlipRate<
	string name = "Flip Rate";
	string field_type = "slider";
	string suffix = " Hz";
	float minimum = 0.01;
	float maximum = 100.0;
	float step = 0.01;
	float scale = 1.00;
> = 10.0;

float4 PSWave(VertexInformation vtx) : TARGET {
	float flip_frequency = 1.f / FlipRate;

	if (fmod(Time.x, flip_frequency) < (flip_frequency / 2.f)) {
		return TextureA.Sample(LinearClampSampler, vtx.texcoord0.xy);
	} else {
		return TextureB.Sample(LinearClampSampler, vtx.texcoord0.xy);
	}
}

technique Flip {	
	pass
	{
		vertex_shader = DefaultVertexShader(vtx);
		pixel_shader = PSWave(vtx);
	}
}
