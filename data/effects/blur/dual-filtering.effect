#include "common.effect"

//------------------------------------------------------------------------------
// Technique: Down
//------------------------------------------------------------------------------
float4 PSDown(VertexInformation vtx) : TARGET {
	//vtx.uv = ((floor(vtx.uv * pImageSize) + float2(0.5, 0.5)) * pImageTexel);
	
	float4 pxCC = pImage.Sample(LinearClampSampler, vtx.uv) * 4.0;
	float4 pxTL = pImage.Sample(LinearClampSampler, vtx.uv - pImageHalfTexel);
	float4 pxTR = pImage.Sample(LinearClampSampler, vtx.uv + pImageHalfTexel);
	float4 pxBL = pImage.Sample(LinearClampSampler, vtx.uv + float2(pImageHalfTexel.x, -pImageHalfTexel.y));
	float4 pxBR = pImage.Sample(LinearClampSampler, vtx.uv - float2(pImageHalfTexel.x, -pImageHalfTexel.y));
	
	return (pxCC + pxTL + pxTR + pxBL + pxBR) * 0.125;
}

technique Down {
	pass {
		vertex_shader = VSDefault(vtx);
		pixel_shader  = PSDown(vtx);
	}
}

//------------------------------------------------------------------------------
// Technique: Up
//------------------------------------------------------------------------------
float4 PSUp(VertexInformation vtx) : TARGET {
	//vtx.uv = ((floor(vtx.uv * pImageSize) + float2(0.5, 0.5)) * pImageTexel);

	float4 pxL = pImage.Sample(LinearClampSampler, vtx.uv - float2(pImageHalfTexel.x * 2.0, 0.));
	float4 pxBL = pImage.Sample(LinearClampSampler, vtx.uv - float2(pImageHalfTexel.x, -pImageHalfTexel.y));
	float4 pxB = pImage.Sample(LinearClampSampler, vtx.uv + float2(0., pImageHalfTexel.y * 2.0));
	float4 pxBR = pImage.Sample(LinearClampSampler, vtx.uv + pImageHalfTexel);
	float4 pxR = pImage.Sample(LinearClampSampler, vtx.uv + float2(pImageHalfTexel.x * 2.0, 0.));
	float4 pxTR = pImage.Sample(LinearClampSampler, vtx.uv + float2(pImageHalfTexel.x, -pImageHalfTexel.y));
	float4 pxT = pImage.Sample(LinearClampSampler, vtx.uv - float2(0., pImageHalfTexel.y * 2.0));
	float4 pxTL = pImage.Sample(LinearClampSampler, vtx.uv - pImageHalfTexel);

	return (((pxTL + pxTR + pxBL + pxBR) * 2.0) + pxL + pxR + pxT + pxB) * 0.083333333333;
	// return (((pxTL + pxTR + pxBL + pxBR) * 2.0) + pxL + pxR + pxT + pxB) / 12;
}

technique Up {
	pass {
		vertex_shader = VSDefault(vtx);
		pixel_shader  = PSUp(vtx);
	}
}
