// AUTOGENERATED COPYRIGHT HEADER START
// Copyright (C) 2020-2023 Michael Fabian 'Xaymar' Dirks <info@xaymar.com>
// AUTOGENERATED COPYRIGHT HEADER END

//--------------------------------------------------------------------------------//
// THIS FEATURE IS DEPRECATED. SUBMITTED PATCHES WILL BE REJECTED.
//--------------------------------------------------------------------------------//

#pragma once
#include "handler.hpp"

extern "C" {
#include "warning-disable.hpp"
#include <libavcodec/avcodec.h>
#include "warning-enable.hpp"
}

namespace streamfx::encoder::ffmpeg::handler {
	class amf_hevc_handler : public handler {
		public:
		virtual ~amf_hevc_handler(){};

		public /*factory*/:
		virtual void adjust_info(ffmpeg_factory* factory, const AVCodec* codec, std::string& id, std::string& name,
								 std::string& codec_id);

		virtual void get_defaults(obs_data_t* settings, const AVCodec* codec, AVCodecContext* context, bool hw_encode);

		virtual std::string_view get_help_url(const AVCodec* codec) override
		{
			return "https://github.com/Xaymar/obs-StreamFX/wiki/Encoder-FFmpeg-AMF";
		};

		public /*support tests*/:
		virtual bool has_keyframe_support(ffmpeg_factory* instance);

		virtual bool is_hardware_encoder(ffmpeg_factory* instance);

		virtual bool has_threading_support(ffmpeg_factory* instance);

		virtual bool has_pixel_format_support(ffmpeg_factory* instance);

		public /*settings*/:
		virtual void get_properties(obs_properties_t* props, const AVCodec* codec, AVCodecContext* context,
									bool hw_encode);

		virtual void migrate(obs_data_t* settings, std::uint64_t version, const AVCodec* codec,
							 AVCodecContext* context);

		virtual void update(obs_data_t* settings, const AVCodec* codec, AVCodecContext* context);

		virtual void override_update(ffmpeg_instance* instance, obs_data_t* settings);

		virtual void log_options(obs_data_t* settings, const AVCodec* codec, AVCodecContext* context);

		private:
		void get_encoder_properties(obs_properties_t* props, const AVCodec* codec);

		void get_runtime_properties(obs_properties_t* props, const AVCodec* codec, AVCodecContext* context);
	};
} // namespace streamfx::encoder::ffmpeg::handler
